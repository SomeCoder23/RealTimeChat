name: Docker Image CI

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
    - uses: actions/checkout@v3
    
    - name: Set image version (tag)
      id: image_version
      run: echo "gitsha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: Build the Docker image
      run: docker build . --file Dockerfile --tag ghcr.io/somecoder23/realtimechat:${{ steps.image_version.outputs.gitsha }}
    - name: Publish docker image
      run: docker push ghcr.io/somecoder23/realtimechat:${{ steps.image_version.outputs.gitsha }}
  
    - name: Get EC2 Instance IPs
      id: get_instances_ips
      run: |
        instances=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=rs-test" --query 'Reservations [*].Instances[*].[PublicIpAddress]' --output json | jq --compact-output 'flatten')
        echo "ips=$instances" >> $GITHUB_OUTPUT
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}

  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        instances:
          - 13.49.158.162
          - 13.53.199.163
          - 13.51.36.224
          - 16.171.63.67	
          - 13.48.48.143	
          
    steps:
    - uses: actions/checkout@v3    
    - name: configure docker host
      uses: khaledez/configure-docker-host@v1
      with:
        host: ${{ matrix.ip }}
        user: github
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Login to Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    - name: deploy
      run: docker compose -f docker-compose-prod.yml up -d && docker system prune -af
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        GIT_VERSION: ${{ steps.image_version.outputs.gitsha }}
        RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT}}
    - name: print logs
      if: always()  
      run: docker compose logs