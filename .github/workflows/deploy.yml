name: Build Docker Image CI and Deploy to ASG

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
  
jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    concurrency: build-docker
    outputs:
      ec2_ips: ${{ steps.get_instance_ips.outputs.ips }}
    steps:
      - uses: actions/checkout@v3
    
      - name: Setup docker build
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Push Container
        uses: docker/build-push-action@v2
        with:
          platforms: linux/amd64
          push: true
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/realtimechat-1-app:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Get EC2 Instance IPs
        id: get_instance_ips
        run: |
          instances=$(aws ec2 describe-instances --filters "Name=tag:aws:autoscaling:groupName,Values=neew-rs" --query 'Reservations[*].Instances[*].[PublicIpAddress]' --output json | jq --compact-output 'flatten')
          echo "ips=$instances" >> $GITHUB_OUTPUT
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}

  
  deploy:
    needs: ["build"]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        ip: ${{ fromJson(needs.build.outputs.ec2_ips) }}
    steps:
      - uses: actions/checkout@v3

      - name: configure docker host
        uses: khaledez/configure-docker-host@v1
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
          host: ${{ matrix.ip }}
          user: github

      - name: Login to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: deploy
        run: |
          docker compose -f docker-compose.yml up -d
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          GIT_VERSISON: ${{ needs.build.outputs.image_version }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
          DB_NAME: ${{ secrets.DB_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          PORT: 5000
          AWS_SES_ACCESS_KEY: ${{ secrets.AWS_SES_ACCESS_KEY }}
          AWS_SES_SECRET_ACCESS_KEY: ${{ secrets.AWS_SES_SECRET_ACCESS_KEY }}
          AWS_SES_REGION: ${{ secrets.AWS_SES_REGION }}
      